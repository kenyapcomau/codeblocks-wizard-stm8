////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: STM8 project
// Author:  Ken Yap
//
////////////////////////////////////////////////////////////////////////////////

// Global Vars
MemoryModel <- _T("medium");     // The chosen memory model
MemoryModelIndex <- 0;     // The memory model as integer
IntelHex <- true;          // produce Intel Hex file?

function BeginWizard()
{
    local wiz_type = Wizard.GetWizardType();

    if (wiz_type == wizProject)
    {
        local intro_msg = _T("Welcome to the STM8 project wizard!\n" +
                             "This wizard will guide you to create a new STM8 project.\n\n" +
                             "When you 're ready to proceed, please click \"Next\"...");

        Wizard.AddInfoPage(_T("STM8Intro"), intro_msg);
        Wizard.AddProjectPathPage();
        Wizard.AddCompilerPage(_T("SDCC Compiler"), _T("sdcc*"), true, true);
        Wizard.AddPage(_T("memoryModelChoice"));
    }
    else
        print(wiz_type);
}

function GetGeneratedFile(file_index)
{
    if (file_index == 0)
    {
        local path    = Wizard.FindTemplateFile(_T("stm8/files/main.c"));
        local buffer  = IO.ReadFileContents(path);
        return _T("main.c;") + buffer;
    }
    return _T(""); // no other files
}

function GetFilesDir()
{
    local result = _T(""); // file is generated
    return result;
}

////////////////////////////////////////////////////////////////////////////////
// Memory Model choice page
////////////////////////////////////////////////////////////////////////////////

function OnEnter_memoryModelChoice(fwd)
{
    if (fwd)
    {
        Wizard.SetComboboxSelection(_T("comboboxMem"), ConfigManager.Read(_T("/stm8_project_wizard/memorymodel"), 0));
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
        {
            Wizard.EnableWindow(_T("radioboxOutput"), true);
        }
        else
        {
            Wizard.EnableWindow(_T("radioboxOutput"), false);
        }
    }
    return true;
}

function OnLeave_memoryModelChoice(fwd)
{
    if (fwd)
    {
        MemoryModel = Wizard.GetComboboxStringSelection(_T("comboboxMem"));
        MemoryModelIndex = Wizard.GetComboboxSelection(_T("comboboxMem"));
        if ( Wizard.GetRadioboxSelection(_T("radioboxOutput")) == 1 )
        {
            IntelHex = false;
        }
        ConfigManager.Write(_T("/stm8_project_wizard/memorymodel"), MemoryModelIndex);
    }
    return true;
}

function SetupProject(project)
{
    //Variables
    local out_ext = ::wxString();

    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
    {
        // Post Build steps
        local pb_hex = ::wxString();

        // Post build commands
        if (PLATFORM_MSW == PLATFORM)
            pb_hex = _T("cmd /c \"packihx <$(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).ihx >$(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).hex\"");
        else
            pb_hex = _T("packihx <$(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).ihx >$(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).hex");

        // Project compiler options
        project.AddCompilerOption(_T("-mstm8"));
        project.AddCompilerOption(_T("--model-") + MemoryModel);

        // Project linker options

        // Project post-build steps
        if (IntelHex)
        {
            project.AddCommandsAfterBuild(pb_hex);
            out_ext = _T(".ihx");
        }
        else
        {
            project.AddLinkerOption(_T("--out-fmt-elf"));
            out_ext = _T(".elf");
        }
    }

    // Debug build target
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttNative);
        target.SetTargetFilenameGenerationPolicy(tgfpPlatformDefault, tgfpNone);
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + out_ext);
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release build target
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttNative);
        target.SetTargetFilenameGenerationPolicy(tgfpPlatformDefault, tgfpNone);
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + out_ext);
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
